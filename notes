most commond errors:

- forgetting the def in front of the method
- extra }
- forgueting the user of return when i want skip statements in a method return x if game.ready?
- typho that goes over run, eg in initialize



cucumber-sinatra init Battleships lib/battleships.rb --app

creates files --> lib/batteships.rb--> class Battleships < Sinatra::Base

features --> step_definitions --> web_steps.rb(delete)
support --> env.rb
support --> paths.rb(delete??)
config.ru --> rack config file

rack up --> localhost:9292

deleting features/step_definitions/web_steps.rb and features/support/paths.rb --> misleading

creating a file .feature in the features directory

describe feature an first scenario(what i want,who am i, )


given(some fact),when(trigger), then(action desired)

cucumber --> given () do, when () do, then do

create features/step_definitions/homepage_steps.rb (step definition file) (paste cucumber info)

cucumber -- > ruby


create the views files in views/
set :views, Proc.new

the root is inside of lib

link(sign in) --> <a>sign in</a>

When we need to send data to the server we need to use forms,
<form action='/si

when we posting we have a param coming with the name:
<input type='text' name='name' placehoder='Who are you?'/>


git to ignore the notes

gem for debugging save_and_open_page
launchy

form action="/new_player" methods="post"
 raise params.inspect
 {"player_name" => "Hadi"}
 @name = params[:player_name]}



set :views
enable:sessions

raise session.inspect

session[:me]



<% if session["player2"] %>
<h1>player 2</h1>


<% else %><% end %>


<header>
</header>
<main>
	<header></header>
</main>


redirect '/new' if @items.empty?
  erb :index
end

http://www.creativebloq.com/web-design/get-started-sinatra-9134565
££##################################################
<ul id="todo-list" class="unstyled">
  <% @items.each do |item| %>
  <li id="<%= item[:id] %>">
  <span class="item">
  <%= item[:done] ? "<del>#{item[:content]}</del>" : item[:content] %>
  </span>
  <span class="pull-right">
  <a href="#" class="btn done"><%= item[:done] ? "Not done" : "Done"%></a>
  <a href="/delete/<%= item[:id] %>" class="btn btn-danger">Delete</a>
  </span>
  </li>
  <% end %>
</ul>
<a href="/new" class="btn btn-primary">Add todo item</a>
££##################################################
The reason that we have so little HTML in this view is because most of it is in the layout. Sinatra enables you to create a view called layout – followed by the extension of the template language being used – in this case, layout.erb. This file is then loaded for all views.

   <h1><%= @title %></h1>
      <%= yield %>

      The layout must contain the yield variable, which is where the main view content is displayed.

For Cucumber features the key words used here are Feature, Scenario, Given, When, Then, and And. 

 The clauses ( steps ) that make up a Scenario each begin with one of: Given, When, Then, And 

 They are the steps that Cucumber will report as passing, failing or pending based on the results of the corresponding step matchers in the step_definitions.rb files.

Cucumber documentation:
https://github.com/cucumber/cucumber/wiki/A-Table-Of-Content

Short blog article on how write cukes for cucumber:
how to write cukes for cucumber: http://www.elabs.se/blog/15-you-re-cuking-it-wrong

Article on how to write stories:
http://blog.josephwilk.net/ruby/telling-a-good-story-rspec-stories-from-the-trenches.html


A feature can be conceptualized as an indivisible unit of functionality embedded in the project to which it belongs. 

good step definition has the following attributes:

The matcher is short.
The matcher handles both positive and negative (true and false) conditions.
The matcher has at most two value parameters
The parameter variables are clearly named
The body is less than ten lines of code
The body does not call other steps
My template for a step definition presently looks like this:


When /statement identifier( not)? expectation "([^\"]+)"/i do |boolean, value|
  actual = expectation( value )
  expected = !boolean
  message = "expectation failed for #{value}" 
  assert( actual == expected, message )
end


how to test jekyll with cucumber: https://github.com/jekyll/jekyll/blob/master/features/step_definitions/jekyll_steps.rb


reset css


Design for hackers --> awesome book about CSS

http://webtypography.net/

<!-- <h1><%= 'Pablo' %>, Please place your ships</h1> -->

 <% @board.grid.values.each do |cell| %>



<table>
	<tr>
		<% [*'A'..'J'].each do |letter|%>
		<th><%= letter%></th>
		<%end%>
	</tr>
	<% x = 0 %>
	 <% @board.grid.values.each do |cell| %>
	 	<% x += 1 %>
	 	<td><%= cell.content.inspect %></td>
	 	<% if x % 10 == 0 %>
	 		<th><%=  x / 10  %><th>
	 		</tr>
	 	<% end %>
	 		
	 <% end %>	
	
	
</table>


<table>

	<tr>
		<th>*</th>
		<% [*'A'..'J'].each do |letter|%>
		<th><%= letter %></th>
		<%end%>
	<% x = 10 %>
	 <% @board.grid.values.each do |cell| %>
	 	<% if x % 10 == 0 %>
	 		</tr>
	 		<tr>
	 		<th><%=  x / 10  %></th>
	 	<% end %>
	 	<td><%= cell.content.inspect %></td>
	 	<% x += 1 %>
	 <% end %>	
	
	
</table>
  erb :board_player_one if session.has_key?(player1)
    erb :board_player_two if session.has_key?(player2)



